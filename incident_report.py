# -*- coding: utf-8 -*-
"""incident_report.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15zkDQc_JJGgVL31Htm18KruZb94imUXY
"""

!pip install transformers spacy jinja2
!python -m spacy download en_core_web_sm

import spacy
from transformers import pipeline
from jinja2 import Template
from datetime import datetime
from IPython.display import Markdown
import re

nlp = spacy.load("en_core_web_sm")
generator = pipeline("text-generation", model="gpt2")

def extract_cyber_entities(text):
    doc = nlp(text)
    entities = {
        "GPE": [], "ORG": [], "PERSON": [],
        "DATE": [], "TIME": [], "IP": [], "HOST": []
    }
    ip_matches = re.findall(r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b', text)
    host_matches = re.findall(r'host ([\w\-]+)', text, re.IGNORECASE)

    for ent in doc.ents:
        if ent.label_ in entities:
            entities[ent.label_].append(ent.text)

    entities["IP"] = ip_matches
    entities["HOST"] = host_matches
    return entities

def generate_incident_report(entities, log_text):
    def safe_get(key, fallback):
        val = entities.get(key, [])
        return val[0] if val else fallback

    host = safe_get("HOST", "Unknown Host")
    ip = safe_get("IP", "Unknown IP")
    time = safe_get("TIME", "Unknown Time")
    date = safe_get("DATE", "Unknown Date")

    prompt = f"""
Cybersecurity Incident Report:
A security event was detected involving host {host}.
The system attempted to connect to IP address {ip}.
The event occurred around {time} on {date}.
Summary of detected behavior: {log_text}
Further investigation is recommended.
"""
    result = generator(prompt, max_new_tokens=256, do_sample=True, temperature=0.7)
    return result[0]['generated_text']

def generate_claim_document(claim_data):
    template = Template("""
===============================
     CYBER INSURANCE CLAIM
===============================

Claimant: {{ claimant }}
Organization: {{ organization }}
Date of Incident: {{ date }}
Impacted System: {{ host }}
Malicious IP: {{ ip }}
Summary:
{{ summary }}

Estimated Damage: â‚¹{{ damage }}
Date Filed: {{ filed }}
""")
    return template.render(**claim_data)

log_input = input("Paste system log or alert text:\n")

entities = extract_cyber_entities(log_input)

incident_report = generate_incident_report(entities, log_input)

def safe_get(entities, key, fallback):
    val = entities.get(key, [])
    return val[0] if val else fallback

claim_data = {
    "claimant": "Security Officer",
    "organization": "ABC CyberSecure Pvt Ltd",
    "date": safe_get(entities, "DATE", "Unknown Date"),
    "host": safe_get(entities, "HOST", "Unknown Host"),
    "ip": safe_get(entities, "IP", "Unknown IP"),
    "summary": incident_report,
    "damage": "200000",
    "filed": datetime.today().strftime('%Y-%m-%d')
}

claim_doc = generate_claim_document(claim_data)

print("\n--- Incident Report ---\n")
display(Markdown(incident_report))

print("\n--- Claim Document ---\n")
display(Markdown(claim_doc))

with open("incident_report.txt", "w") as f:
    f.write(incident_report)

with open("cyber_claim.txt", "w") as f:
    f.write(claim_doc)

from google.colab import files
files.download("incident_report.txt")
files.download("cyber_claim.txt")

